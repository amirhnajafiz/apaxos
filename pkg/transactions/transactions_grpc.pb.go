// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: transactions.proto

package transactions

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Transactions_NewTransaction_FullMethodName    = "/transactions.Transactions/NewTransaction"
	Transactions_PrintBalance_FullMethodName      = "/transactions.Transactions/PrintBalance"
	Transactions_PrintLogs_FullMethodName         = "/transactions.Transactions/PrintLogs"
	Transactions_PrintDB_FullMethodName           = "/transactions.Transactions/PrintDB"
	Transactions_Performance_FullMethodName       = "/transactions.Transactions/Performance"
	Transactions_AggregatedBalance_FullMethodName = "/transactions.Transactions/AggregatedBalance"
)

// TransactionsClient is the client API for Transactions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// creating rpc services for transactions and apaxos.
// the transactions service is for handling client-server calls.
type TransactionsClient interface {
	NewTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
	PrintBalance(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PrintBalanceResponse, error)
	PrintLogs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Block], error)
	PrintDB(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Block], error)
	Performance(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PerformanceResponse, error)
	AggregatedBalance(ctx context.Context, in *AggregatedBalanceRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AggregatedBalanceResponse], error)
}

type transactionsClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionsClient(cc grpc.ClientConnInterface) TransactionsClient {
	return &transactionsClient{cc}
}

func (c *transactionsClient) NewTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, Transactions_NewTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsClient) PrintBalance(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PrintBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrintBalanceResponse)
	err := c.cc.Invoke(ctx, Transactions_PrintBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsClient) PrintLogs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Block], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Transactions_ServiceDesc.Streams[0], Transactions_PrintLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, Block]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Transactions_PrintLogsClient = grpc.ServerStreamingClient[Block]

func (c *transactionsClient) PrintDB(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Block], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Transactions_ServiceDesc.Streams[1], Transactions_PrintDB_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, Block]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Transactions_PrintDBClient = grpc.ServerStreamingClient[Block]

func (c *transactionsClient) Performance(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PerformanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PerformanceResponse)
	err := c.cc.Invoke(ctx, Transactions_Performance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsClient) AggregatedBalance(ctx context.Context, in *AggregatedBalanceRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AggregatedBalanceResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Transactions_ServiceDesc.Streams[2], Transactions_AggregatedBalance_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AggregatedBalanceRequest, AggregatedBalanceResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Transactions_AggregatedBalanceClient = grpc.ServerStreamingClient[AggregatedBalanceResponse]

// TransactionsServer is the server API for Transactions service.
// All implementations must embed UnimplementedTransactionsServer
// for forward compatibility.
//
// creating rpc services for transactions and apaxos.
// the transactions service is for handling client-server calls.
type TransactionsServer interface {
	NewTransaction(context.Context, *Transaction) (*TransactionResponse, error)
	PrintBalance(context.Context, *emptypb.Empty) (*PrintBalanceResponse, error)
	PrintLogs(*emptypb.Empty, grpc.ServerStreamingServer[Block]) error
	PrintDB(*emptypb.Empty, grpc.ServerStreamingServer[Block]) error
	Performance(context.Context, *emptypb.Empty) (*PerformanceResponse, error)
	AggregatedBalance(*AggregatedBalanceRequest, grpc.ServerStreamingServer[AggregatedBalanceResponse]) error
	mustEmbedUnimplementedTransactionsServer()
}

// UnimplementedTransactionsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransactionsServer struct{}

func (UnimplementedTransactionsServer) NewTransaction(context.Context, *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewTransaction not implemented")
}
func (UnimplementedTransactionsServer) PrintBalance(context.Context, *emptypb.Empty) (*PrintBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrintBalance not implemented")
}
func (UnimplementedTransactionsServer) PrintLogs(*emptypb.Empty, grpc.ServerStreamingServer[Block]) error {
	return status.Errorf(codes.Unimplemented, "method PrintLogs not implemented")
}
func (UnimplementedTransactionsServer) PrintDB(*emptypb.Empty, grpc.ServerStreamingServer[Block]) error {
	return status.Errorf(codes.Unimplemented, "method PrintDB not implemented")
}
func (UnimplementedTransactionsServer) Performance(context.Context, *emptypb.Empty) (*PerformanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Performance not implemented")
}
func (UnimplementedTransactionsServer) AggregatedBalance(*AggregatedBalanceRequest, grpc.ServerStreamingServer[AggregatedBalanceResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AggregatedBalance not implemented")
}
func (UnimplementedTransactionsServer) mustEmbedUnimplementedTransactionsServer() {}
func (UnimplementedTransactionsServer) testEmbeddedByValue()                      {}

// UnsafeTransactionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionsServer will
// result in compilation errors.
type UnsafeTransactionsServer interface {
	mustEmbedUnimplementedTransactionsServer()
}

func RegisterTransactionsServer(s grpc.ServiceRegistrar, srv TransactionsServer) {
	// If the following call pancis, it indicates UnimplementedTransactionsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Transactions_ServiceDesc, srv)
}

func _Transactions_NewTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServer).NewTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transactions_NewTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServer).NewTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transactions_PrintBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServer).PrintBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transactions_PrintBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServer).PrintBalance(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transactions_PrintLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionsServer).PrintLogs(m, &grpc.GenericServerStream[emptypb.Empty, Block]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Transactions_PrintLogsServer = grpc.ServerStreamingServer[Block]

func _Transactions_PrintDB_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionsServer).PrintDB(m, &grpc.GenericServerStream[emptypb.Empty, Block]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Transactions_PrintDBServer = grpc.ServerStreamingServer[Block]

func _Transactions_Performance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServer).Performance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transactions_Performance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServer).Performance(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transactions_AggregatedBalance_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AggregatedBalanceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionsServer).AggregatedBalance(m, &grpc.GenericServerStream[AggregatedBalanceRequest, AggregatedBalanceResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Transactions_AggregatedBalanceServer = grpc.ServerStreamingServer[AggregatedBalanceResponse]

// Transactions_ServiceDesc is the grpc.ServiceDesc for Transactions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Transactions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transactions.Transactions",
	HandlerType: (*TransactionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewTransaction",
			Handler:    _Transactions_NewTransaction_Handler,
		},
		{
			MethodName: "PrintBalance",
			Handler:    _Transactions_PrintBalance_Handler,
		},
		{
			MethodName: "Performance",
			Handler:    _Transactions_Performance_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PrintLogs",
			Handler:       _Transactions_PrintLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PrintDB",
			Handler:       _Transactions_PrintDB_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AggregatedBalance",
			Handler:       _Transactions_AggregatedBalance_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "transactions.proto",
}

const (
	Apaxos_Propose_FullMethodName  = "/transactions.Apaxos/Propose"
	Apaxos_Promise_FullMethodName  = "/transactions.Apaxos/Promise"
	Apaxos_Accept_FullMethodName   = "/transactions.Apaxos/Accept"
	Apaxos_Accepted_FullMethodName = "/transactions.Apaxos/Accepted"
	Apaxos_Commit_FullMethodName   = "/transactions.Apaxos/Commit"
	Apaxos_Sync_FullMethodName     = "/transactions.Apaxos/Sync"
)

// ApaxosClient is the client API for Apaxos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// the apaxos service is for handling internal node calls for
// performing paxos.
type ApaxosClient interface {
	Propose(ctx context.Context, in *BallotNumber, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Promise(ctx context.Context, in *PromiseMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Accept(ctx context.Context, in *AcceptMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Accepted(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Commit(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Sync(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SyncMessage, emptypb.Empty], error)
}

type apaxosClient struct {
	cc grpc.ClientConnInterface
}

func NewApaxosClient(cc grpc.ClientConnInterface) ApaxosClient {
	return &apaxosClient{cc}
}

func (c *apaxosClient) Propose(ctx context.Context, in *BallotNumber, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Apaxos_Propose_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apaxosClient) Promise(ctx context.Context, in *PromiseMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Apaxos_Promise_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apaxosClient) Accept(ctx context.Context, in *AcceptMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Apaxos_Accept_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apaxosClient) Accepted(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Apaxos_Accepted_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apaxosClient) Commit(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Apaxos_Commit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apaxosClient) Sync(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SyncMessage, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Apaxos_ServiceDesc.Streams[0], Apaxos_Sync_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SyncMessage, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Apaxos_SyncClient = grpc.ClientStreamingClient[SyncMessage, emptypb.Empty]

// ApaxosServer is the server API for Apaxos service.
// All implementations must embed UnimplementedApaxosServer
// for forward compatibility.
//
// the apaxos service is for handling internal node calls for
// performing paxos.
type ApaxosServer interface {
	Propose(context.Context, *BallotNumber) (*emptypb.Empty, error)
	Promise(context.Context, *PromiseMessage) (*emptypb.Empty, error)
	Accept(context.Context, *AcceptMessage) (*emptypb.Empty, error)
	Accepted(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	Commit(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	Sync(grpc.ClientStreamingServer[SyncMessage, emptypb.Empty]) error
	mustEmbedUnimplementedApaxosServer()
}

// UnimplementedApaxosServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedApaxosServer struct{}

func (UnimplementedApaxosServer) Propose(context.Context, *BallotNumber) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Propose not implemented")
}
func (UnimplementedApaxosServer) Promise(context.Context, *PromiseMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Promise not implemented")
}
func (UnimplementedApaxosServer) Accept(context.Context, *AcceptMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Accept not implemented")
}
func (UnimplementedApaxosServer) Accepted(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Accepted not implemented")
}
func (UnimplementedApaxosServer) Commit(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedApaxosServer) Sync(grpc.ClientStreamingServer[SyncMessage, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedApaxosServer) mustEmbedUnimplementedApaxosServer() {}
func (UnimplementedApaxosServer) testEmbeddedByValue()                {}

// UnsafeApaxosServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApaxosServer will
// result in compilation errors.
type UnsafeApaxosServer interface {
	mustEmbedUnimplementedApaxosServer()
}

func RegisterApaxosServer(s grpc.ServiceRegistrar, srv ApaxosServer) {
	// If the following call pancis, it indicates UnimplementedApaxosServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Apaxos_ServiceDesc, srv)
}

func _Apaxos_Propose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BallotNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApaxosServer).Propose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Apaxos_Propose_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApaxosServer).Propose(ctx, req.(*BallotNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apaxos_Promise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromiseMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApaxosServer).Promise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Apaxos_Promise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApaxosServer).Promise(ctx, req.(*PromiseMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apaxos_Accept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApaxosServer).Accept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Apaxos_Accept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApaxosServer).Accept(ctx, req.(*AcceptMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apaxos_Accepted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApaxosServer).Accepted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Apaxos_Accepted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApaxosServer).Accepted(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apaxos_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApaxosServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Apaxos_Commit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApaxosServer).Commit(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apaxos_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ApaxosServer).Sync(&grpc.GenericServerStream[SyncMessage, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Apaxos_SyncServer = grpc.ClientStreamingServer[SyncMessage, emptypb.Empty]

// Apaxos_ServiceDesc is the grpc.ServiceDesc for Apaxos service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Apaxos_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transactions.Apaxos",
	HandlerType: (*ApaxosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Propose",
			Handler:    _Apaxos_Propose_Handler,
		},
		{
			MethodName: "Promise",
			Handler:    _Apaxos_Promise_Handler,
		},
		{
			MethodName: "Accept",
			Handler:    _Apaxos_Accept_Handler,
		},
		{
			MethodName: "Accepted",
			Handler:    _Apaxos_Accepted_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _Apaxos_Commit_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sync",
			Handler:       _Apaxos_Sync_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "transactions.proto",
}
