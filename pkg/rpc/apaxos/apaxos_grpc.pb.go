// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: apaxos.proto

package apaxos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Apaxos_Propose_FullMethodName  = "/apaxos.Apaxos/Propose"
	Apaxos_Promise_FullMethodName  = "/apaxos.Apaxos/Promise"
	Apaxos_Accept_FullMethodName   = "/apaxos.Apaxos/Accept"
	Apaxos_Accepted_FullMethodName = "/apaxos.Apaxos/Accepted"
	Apaxos_Commit_FullMethodName   = "/apaxos.Apaxos/Commit"
	Apaxos_Sync_FullMethodName     = "/apaxos.Apaxos/Sync"
)

// ApaxosClient is the client API for Apaxos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// creating rpc services for transactions and apaxos.
// the apaxos service is for handling internal node calls for
// performing paxos.
type ApaxosClient interface {
	Propose(ctx context.Context, in *PrepareMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Promise(ctx context.Context, in *PromiseMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Accept(ctx context.Context, in *AcceptMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Accepted(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Commit(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Sync(ctx context.Context, in *SyncMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type apaxosClient struct {
	cc grpc.ClientConnInterface
}

func NewApaxosClient(cc grpc.ClientConnInterface) ApaxosClient {
	return &apaxosClient{cc}
}

func (c *apaxosClient) Propose(ctx context.Context, in *PrepareMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Apaxos_Propose_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apaxosClient) Promise(ctx context.Context, in *PromiseMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Apaxos_Promise_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apaxosClient) Accept(ctx context.Context, in *AcceptMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Apaxos_Accept_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apaxosClient) Accepted(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Apaxos_Accepted_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apaxosClient) Commit(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Apaxos_Commit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apaxosClient) Sync(ctx context.Context, in *SyncMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Apaxos_Sync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApaxosServer is the server API for Apaxos service.
// All implementations must embed UnimplementedApaxosServer
// for forward compatibility.
//
// creating rpc services for transactions and apaxos.
// the apaxos service is for handling internal node calls for
// performing paxos.
type ApaxosServer interface {
	Propose(context.Context, *PrepareMessage) (*emptypb.Empty, error)
	Promise(context.Context, *PromiseMessage) (*emptypb.Empty, error)
	Accept(context.Context, *AcceptMessage) (*emptypb.Empty, error)
	Accepted(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	Commit(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	Sync(context.Context, *SyncMessage) (*emptypb.Empty, error)
	mustEmbedUnimplementedApaxosServer()
}

// UnimplementedApaxosServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedApaxosServer struct{}

func (UnimplementedApaxosServer) Propose(context.Context, *PrepareMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Propose not implemented")
}
func (UnimplementedApaxosServer) Promise(context.Context, *PromiseMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Promise not implemented")
}
func (UnimplementedApaxosServer) Accept(context.Context, *AcceptMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Accept not implemented")
}
func (UnimplementedApaxosServer) Accepted(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Accepted not implemented")
}
func (UnimplementedApaxosServer) Commit(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedApaxosServer) Sync(context.Context, *SyncMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedApaxosServer) mustEmbedUnimplementedApaxosServer() {}
func (UnimplementedApaxosServer) testEmbeddedByValue()                {}

// UnsafeApaxosServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApaxosServer will
// result in compilation errors.
type UnsafeApaxosServer interface {
	mustEmbedUnimplementedApaxosServer()
}

func RegisterApaxosServer(s grpc.ServiceRegistrar, srv ApaxosServer) {
	// If the following call pancis, it indicates UnimplementedApaxosServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Apaxos_ServiceDesc, srv)
}

func _Apaxos_Propose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApaxosServer).Propose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Apaxos_Propose_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApaxosServer).Propose(ctx, req.(*PrepareMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apaxos_Promise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromiseMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApaxosServer).Promise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Apaxos_Promise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApaxosServer).Promise(ctx, req.(*PromiseMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apaxos_Accept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApaxosServer).Accept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Apaxos_Accept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApaxosServer).Accept(ctx, req.(*AcceptMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apaxos_Accepted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApaxosServer).Accepted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Apaxos_Accepted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApaxosServer).Accepted(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apaxos_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApaxosServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Apaxos_Commit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApaxosServer).Commit(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apaxos_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApaxosServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Apaxos_Sync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApaxosServer).Sync(ctx, req.(*SyncMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Apaxos_ServiceDesc is the grpc.ServiceDesc for Apaxos service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Apaxos_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apaxos.Apaxos",
	HandlerType: (*ApaxosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Propose",
			Handler:    _Apaxos_Propose_Handler,
		},
		{
			MethodName: "Promise",
			Handler:    _Apaxos_Promise_Handler,
		},
		{
			MethodName: "Accept",
			Handler:    _Apaxos_Accept_Handler,
		},
		{
			MethodName: "Accepted",
			Handler:    _Apaxos_Accepted_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _Apaxos_Commit_Handler,
		},
		{
			MethodName: "Sync",
			Handler:    _Apaxos_Sync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apaxos.proto",
}
