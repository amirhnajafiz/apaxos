syntax = "proto3";
package transactions;

import "google/protobuf/empty.proto";

option go_package = "./transactions";

// creating rpc services for transactions and apaxos.
// the transactions service is for handling client-server calls.
service Transactions {
  rpc NewTransaction(Transaction) returns (TransactionResponse) {}
  rpc PrintBalance(google.protobuf.Empty) returns (PrintBalanceResponse) {}
  rpc PrintLogs(google.protobuf.Empty) returns (stream Block) {}
  rpc PrintDB(google.protobuf.Empty) returns (stream Block) {}
  rpc Performance(google.protobuf.Empty) returns (PerformanceResponse) {}
  rpc AggregatedBalance(
    AggregatedBalanceRequest
  ) returns (PrintBalanceResponse) {}
}
// the apaxos service is for handling internal node calls for
// performing paxos.
service Apaxos {
  rpc Propose(BallotNumber) returns (google.protobuf.Empty) {}
  rpc Promise(PromiseMessage) returns (google.protobuf.Empty) {}
  rpc Accept(AcceptMessage) returns (google.protobuf.Empty) {}
  rpc Accepted(google.protobuf.Empty) returns (google.protobuf.Empty) {}
  rpc Commit(google.protobuf.Empty) returns(google.protobuf.Empty) {}
  rpc Sync(stream Block) returns(google.protobuf.Empty) {}
}

// defining rpc messages, including block, transaction, and ballot number
message Block {
  repeated Transaction transactions = 1;
  string node_id = 2;
  string uid = 3;
  int64 sequence_number = 4;
}

message Transaction {
  string sender = 1;
  string reciever = 2;
  int64 amount = 3;
}

message BallotNumber {
  int64 number = 1;
  string node_id = 2;
}

message LastCommittedMessage {
  string node_id = 1;
  string uid = 2;
  int64 sequence_number = 3;
}

message PromiseMessage {
  BallotNumber ballot_number = 1;
  repeated Block blocks = 2;
}

message AcceptMessage {
  BallotNumber ballot_number = 1;
  repeated Block blocks = 2;
}

// defining client messages requests-responses
message TransactionResponse {
  bool result = 1;
}

message PrintBalanceResponse {
  int64 balance = 1;
}

message PerformanceResponse {
  double throughput = 1;
  double latency = 2;
}

message AggregatedBalanceRequest {
  string client = 1;
}
